#
# This prompt is based on sources from
# https://www.reddit.com/r/commandline/comments/2hw9dm/dynamic_bash_prompt_a_quick_guide/
#

Reset='\[\e[0m\]'
White='\[\e[1;37m\]'
Green='\[\e[0;32m\]'
Red='\[\e[1;31m\]'
Yellow='\[\e[0;33m\]'
Blue='\[\e[1;34m\]'

get_cvs_info () {
	if [ -e CVS ] ; then
		BRANCH=`cat CVS/TAG 2>/dev/null | cut -c 2- `
		cvsinfo="CVS"
		if [ "$BRANCH" != "" ]; then
			echo "$Green $BRANCH"
		fi

		echo "${cvsinfo}"
	fi
}

get_git_info () {
	local OUT=`git rev-parse --abbrev-ref HEAD`
	if [[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]]; then
		echo "${Red}git:$OUT"
	elif [[ $(git diff --cached --shortstat 2> /dev/null | tail -n1) != "" ]]; then
		echo "${Yellow}git:$OUT"
	else
		echo "${Green}git:$OUT"
	fi
}

get_scm_info () {
	if git rev-parse --git-dir > /dev/null 2>&1; then
		get_git_info
	elif [ -e CVS ] ; then
		get_cvs_info
	else
		echo ""
	fi
}

get_python_venv () {
	if [[ -n "$VIRTUAL_ENV" ]]; then
        # Strip out the path and just leave the env name
		#venv="${VIRTUAL_ENV##*/}"
		echo "${Blue}venv"
	else
		echo ""
	fi
}

timer_start () {
  timer=${timer:-$SECONDS}
}

timer_stop () {
  timer_show=$(($SECONDS - $timer))
  unset timer
}

show_time () {
	num=$1
	min=0
	hour=0
	day=0
	if((num>59));then
		((sec=num%60))
		((num=num/60))
		if((num>59));then
			((min=num%60))
			((num=num/60))
			if((num>23));then
				((hour=num%24))
				((day=num/24))
			else
				((hour=num))
			fi
		else
			((min=num))
		fi
	else
		((sec=num))
	fi

	d=""
	if ((day != 0)); then
		d="${day}d "
	fi
	if ((hour != 0)); then
		d="$d ${hour}h "
	fi
	if ((min != 0)); then
		d="$d ${min}m "
	fi
	if ((sec != 0)); then
		d="$d ${sec}s"
	fi
	echo "$d"
}

trap 'timer_start' DEBUG

Promptsymbol='#'

Groupercolor="$Reset"
Leftgroupsymbol='('
Rightgroupsymbol=')'
Leftgrouper="$Groupercolor$Leftgroupsymbol"
Rightgrouper="$Groupercolor$Rightgroupsymbol"

set_prompt () {
	lastreturn=$?
	timer_stop

	# "Light" line drawing characters
	Startline='\342\224\214'
	Middleline='\342\224\234'
	Lastline='\342\224\224'
	Horizontal='\342\224\200'
	Vertical='\342\224\202'

	JumpToStart='\[\e[0G\]'
	SavePos='\[\e[s\]'
	RestorePos='\[\e[u\]'
	MoveUp='\[\e[1A\]'
	MoveLeft='\[\e[1D\]'

	userhost="$Green$(whoami)@$(hostname)"

	if [[ $lastreturn -eq 0 ]]; then lastreturn=""; else lastreturn="$Red$lastreturn"; fi

	currentdir="$White$(pwd | sed "s!^$HOME!~!")"

	scminfo=`get_scm_info`

	python_venv=`get_python_venv`

	duration=`show_time $timer_show`

	wrap "$userhost" "$currentdir" "$python_venv" "$scminfo" "$lastreturn" "$duration"

	PS1+="\n$Lastline$Horizontal$Leftgrouper$Promptsymbol$Rightgrouper $Reset"
}

## TODO Clean up the mess, first argument will never be properly linebroken at the moment
wrap () {
	width=$(tput cols)
	firstline=true
	restlength=$width
	PS1="$Reset"

	while [[ $# -ne 0 ]]; do
		colourless=$(echo -E "$1" | cut -c 13-)
		length=${#colourless}
		((length += 3))

		if [[ -z "$1" ]]; then
			shift
			continue
		elif [[ $restlength -eq $width ]]; then
			if [[ $firstline == "true" ]]; then
				PS1+="$Startline"
			else
				PS1+="$Middleline"
			fi
			PS1+="$Leftgrouper$1$Rightgrouper"
			((restlength -= length))
			shift
		elif [[ $restlength -ge $length ]]; then
			PS1+="$Horizontal$Leftgrouper$1$Rightgrouper"
			((restlength -= length))
			shift
		elif [[ $length -gt $width ]]; then
			textcolour=$(echo $1 | cut -c -12)
			text=$(echo -ne "$colourless" | sed 's/.\{'$(($width - 2))'\}/&\n| /g')
			linestofix=$(($(echo -n "$text" | wc -l) - 1))
			PS1+="\n$Middleline$Leftgrouper$textcolour$text$Rightgrouper$SavePos$JumpToStart"
			while [[ $linestofix -ge 0 ]]; do
			    PS1+="$Vertical$MoveUp$MoveLeft"
			    ((linestofix -= 1))
			done
			PS1+="$RestorePos"
			shift
		else
			PS1+="\n"
			restlength=$width
		fi
		firstline=false
	done
}

PROMPT_COMMAND='set_prompt'
